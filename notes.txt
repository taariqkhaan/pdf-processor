write a program using C#, .NET 8.0.
accepts a pdf file and output folder path as parameter
look for a data.db in the same folder as the pdf file.
looks for table called "pdf_table" inside the database.
contains bottom-left coordinate in X1, Y1 columns.
contains top-right coordinate in X2, Y2 columns.
above coordinates were extracted using PDFpig.
SheetNumber column contains the pdf page number.
sort the table by SheetNumber ascending, ItemNumber ascending, Type alphabetical.

go row-by-row in Type Column
if value is "from_desc" then place a red dot at the corresponding bottom-left and top-right coordinates.
if null, continue.
save the highlighted pdf in the output folder as highlighted_pdf.pdf
use PdfSharp + MigraDoc for annotation. 
Take into account any difference in coordinate systems.


namespace PdfProcessor.Services
{
    public class MissingInfoService
    {
        //put logic in a method here
    }
}

Console.WriteLine($"Page {pageIndex} rotation: {page.Rotation}");
Console.WriteLine($"{wordY1}, {word.Text}, {pageNumber}");
Console.WriteLine($"{}");

'cable_tag'
'from_desc'
'to_desc'
'function'
'size'
'insulation'
'from_ref'
'to_ref'
'voltage'
'conductors'
'length'


write a program using C#, .NET 8.0.

namespace PdfProcessor.Services
{
    public class MissingInfoService
    {
        //put logic in a method here
    }
}

accepts a .db filepath as parameter.
it has a table called pdf_table.
with columns: Text, X1, Y1, X2, Y2, TextRotation, SheetNumber, Type and ItemNUmber.
sort table by ascending SheetNumber, then ascending ItemNumber.

search the Type column and check if there is atleast one instance of the following texts, per unique ItemNumber in a unique SheetNumber.
'cable_tag'
'from_desc'
'to_desc'
'function'
'size'
'insulation'
'from_ref'
'to_ref'
'voltage'
'conductors'
'length'

i.e. each one of the above text should appear at least one in the Type column for SheetNumber 1 and ItemNumber 1,
then  each one of the above text should appear at least one in the Type column for SheetNumber 1 and ItemNumber 2 and so on.
if a text is not found in the Type column, create a row at the end with the Type, SheetNumber and ItemNumber.


Y1_start_line1 = 492
Y1_start_line2 = 480

Y1=Y1_start_line1-(30*(ItemNUmber - 1)) , Y2 = Y1+5.77 will be the common to the following:
'cable_tag' is missing --> X1 = 23, X2 = X1+40
'from_desc' is missing--> X1 = 137, X2 = X1+40,
'to_desc' is missing--> X1 = 275, X2 = X1+40,
'function' is missing--> X1 = 416, X2 = X1+40,
'size' is missing--> X1 = 539, X2 = X1+20,
'insulation' is missing--> X1 = 593, X2 = X1+40,


Y1=Y1_start_line2-(30*(ItemNUmber - 1)) , Y2 = Y1+5.77 will be the common to the following:

'from_ref' is missing--> X1 = 137, X2 = X1+40,
'to_ref' is missing--> X1 = 275, X2 = X1+40,
'voltage' is missing--> X1 = 452, X2 = X1+40,
'conductors' is missing--> X1 = 525, X2 = X1+20,
'length' is missing--> X1 = 583, X2 = X1+20,


('cable_tag','from_desc','to_desc','function','size','insulation','from_ref','to_ref','voltage','conductors','length')


{ "cable_tag", (23, 63, true) },
{ "from_desc", (137, 177, true) },
{ "to_desc", (275, 315, true) },
{ "function", (416, 456, true) },
{ "size", (539, 559, true) },
{ "insulation", (593, 633, true) },
{ "from_ref", (137, 177, false) },
{ "to_ref", (275, 315, false) },
{ "voltage", (452, 492, false) },
{ "conductors", (525, 545, false) },
{ "length", (583, 590, false) }
-----------------------------------------------
write a program using C#, .NET 8.0.
using System.Data.SQLite;

namespace PdfProcessor.Services
{
    public class MissingTagService
    {
        //put logic in a method here
    }
}

accepts a .db filepath as parameter.
it has a table called pdf_table.
with columns: Text, X1, Y1, X2, Y2, TextRotation, SheetNumber, Type and ItemNUmber.
sort table by ascending SheetNumber, then ascending ItemNumber.


go row by row.
check create a list of unique values in the Type column, until ItemNumber changes.
compare the list with this list ""cable_tag", "from_desc", "to_desc", "function", "size", "insulation", "from_ref", "to_ref", "voltage", "conductors", "length""
add rows at the end for all missing types with the corresponding sheet and item number.
Repeat the process for next itemnumber.


x1 = x1_low , y1 =  => "cable_tag",
_ when x1 > x1_current + 100 && x1 <= x1_current + 230 => "from_desc",
_ when x1 > x1_current + 231 && x1 <= x1_current + 360 => "to_desc",
_ when x1 > x1_current + 361 && x1 <= x1_current + 420 => "function",
_ when x1 > x1_current + 486 && x1 <= x1_current + 530 => "size",
_ when x1 > x1_current + 540 && x1 <= x1_current + 700 => "insulation",
 
_ when x1 > x1_current + 100 && x1 <= x1_current + 230 => "from_ref",
_ when x1 > x1_current + 231 && x1 <= x1_current + 360 => "to_ref",
_ when x1 > x1_current + 400 && x1 <= x1_current + 450 => "voltage",
_ when x1 > x1_current + 450 && x1 <= x1_current + 520 => "conductors",
_ when x1 > x1_current + 521 && x1 <= x1_current + 566 => "length", 





this function is where ItemNumber changes. 
Keep a list of all the entires made in the Type column for any given ItemNUmber.
when the control goes inside this function i.e. Itemnumber changes, execute a missingtag function.

missing tag function will accept the (list of all unique entries made in the Type column, sheetnumber, itenumber, x1_current, y1_current)

add rows fo all missing entries to the database with the sheet number, itemnumber, type and following x1,y1, x2, y2 values

Y1_start_line1 = y1_current + 30
Y1_start_line2 = y1_current

Y1=Y1_start_line1-(30*(ItemNUmber - 1)) , Y2 = Y1 + 5.77 will be the common to the following:
'cable_tag' is missing --> X1 = x1_current, X2 = X1+40
'from_desc' is missing--> X1 = x1_current + 100, X2 = X1+40,
'to_desc' is missing--> X1 = x1_current + 231, X2 = X1+40,
'function' is missing--> X1 = x1_current + 361, X2 = X1+40,
'size' is missing--> X1 = x1_current + 486, X2 = X1+20,
'insulation' is missing--> X1 = x1_current + 540, X2 = X1+40,


Y1=Y1_start_line2-(30*(ItemNUmber - 1)) , Y2 = Y1 + 5.77 will be the common to the following:

'from_ref' is missing--> X1 = x1_current + 100, X2 = X1+40,
'to_ref' is missing--> X1 = x1_current + 231, X2 = X1+40,
'voltage' is missing--> X1 = x1_current + 400, X2 = X1+40,
'conductors' is missing--> X1 = x1_current + 450, X2 = X1+20,
'length' is missing--> X1 = x1_current + 521, X2 = X1+20,

make sure to reset the list anytime the itemnumber changes.


-------------------------------------------------------------------------

namespace PdfProcessor.Services;
public class DrawingService
{
    public void ExtractText(string pdfPath, string outputFolder)
    {
    
    
write a c# code using .net 8.0 and pdfpig to extract texts from pdf.
add a function to save the word, 
bottom-left coordinate of first character,
top-right coordinate of last character of the word,
sheet number to csv in the output folder passed on the parameter.


'facility_name', 'facility_id', 'dwg_title1','dwg_title2', 'dwg_scale', 'dwg_size', 'dwg_number', 'dwg_sheet', 'dwg_rev', 'dwg_type'

 if (page.Rotation != 0)
    {
        gfx.TranslateTransform( page.Width - page.Height,page.Height);
        gfx.RotateTransform(270);
    }


Console.WriteLine($"Page {pageIndex} rotation: {page.Rotation}");
Console.WriteLine($"{wordY1}, {word.Text}, {pageNumber}");
Console.WriteLine($"{}");

PdfTextService _pdfTextService = new PdfTextService();
stopwatch = Stopwatch.StartNew();
List<PdfTextModel> extractedBowData = _pdfTextService.ExtractTextAndCoordinates(BowPath, DocumentType);
stopwatch.Stop();
Console.WriteLine($"PdfRegionService Time: {stopwatch.ElapsedMilliseconds} ms");



-------------------------------------------------------------------------------------------------------------
a database contains two tables: BOW_table and DWG_table.

Both BOW_table and DWG_table have following columns:
Id, Word, X1, Y1, X2, Y2, Sheet, PageRotation, WordRotation, Tag, Item, ColorFlag

BOW_table and DWG_table data are extracted from two separate PDFs.


BOW_table
select [Word, Sheet, Tag, Item]
order by Sheet, Item

DWG_table
[Word, Sheet, Tag]
order by Sheet



in BOW_table and DWG_table, iterate through all Tag = 'cable_tag', 
if ColorFlag ==0 , then check
if Word value matches in both tables

==> using [Sheet, Item] extract Word value of Tag='to_ref' from BOW_table
==> using [Sheet] extract Word value of Tag= 'full_dwg_number' from DWG_table

if match is found, set ColorFlag of corresponding to_ref in BOW_table to 1.
and ColorFlag of 'cable_tag' in DWG_table to 1.
if match is not found, set both to 3.

==> using [Sheet, Item] extract Word value of Tag='from_ref' from BOW_table
==> using [Sheet] extract Word value of Tag= 'full_dwg_number' from DWG_table

if match is found, set ColorFlag of corresponding from_ref in BOW_table to 1.
and ColorFlag of 'cable_tag' in DWG_table to 1.
if match is not found, set both to 3.

-------------------------------------------------------------------

a database contains two tables: BOW_table and DWG_table.

Both BOW_table and DWG_table have following columns:
Id, Word, X1, Y1, X2, Y2, Sheet, PageRotation, WordRotation, Tag, Item, ColorFlag

BOW_table and DWG_table data are extracted from two separate PDFs using PDFpig.

BOW_table
if the Tag = "from_ref" && ColorFlag = 1, then store X1, Y1, X2, Y2, Sheet, Word values.
search for the Word in the Word column of DWG_table.
if a match is found, get the corresponding Sheet.
look for the Tag = "cable_tag"  with that sheet number. 
store corresponding X1, Y1, X2, Y2, Sheet.

using the X1, Y1, X2, Y2, Sheet in BOW_table, create a hyperlink in bow.pdf to  dwg.pdf using X1, Y1, X2, Y2, Sheet in DWG_table.

using System;
using System.IO;
using System.Data.SQLite;
using iText.Kernel.Pdf;
using iText.Kernel.Pdf.Annot;
using iText.Kernel.Pdf.Action;
using iText.Kernel.Geom;

namespace PdfProcessor.Services;

public class HyperlinkService
{
    public void HyperlinkMain(string dbFilePath, string bowPath, string dwgPath)
    {
        if (!File.Exists(dbFilePath))
        {
            Console.WriteLine("Database file not found.");
            return;
        }

        try
        {
            using (var connection = new SQLiteConnection($"Data Source={dbFilePath};Version=3;"))
            {
                connection.Open();
                AddHyperlink(connection,bowPath, dwgPath);
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error processing database: {ex.Message}");
        }
    }
    public void AddHyperlink(SQLiteConnection connection, string bowPath, string dwgPath)
    {
        // logic here
    }
----------------------------------------------------------------------------------------------------------------
use C#, .NET 8.0, itext7, SQLlite

a database contains table called BOW_table as input parameter dbFilePath.
with following columns:
Id, Word, X1, Y1, X2, Y2, Sheet, PageRotation, WordRotation, Tag, Item, ColorFlag.


create a table called soco_cables_list.
columns: KeyMark, ParallelCables, Conductors, Size, Insulation.
ParallelCables, Conductors are type integer
KeyMark, Size, Insulation are type text

select Word, Tag, Sheet and Item
where tag = "size" or "insulation" or "conductors" or "parallel_cables"
order by sheet, item, tag.

create a dictionary called bowCablesList
to store Word values of "size" or "insulation" or "conductors" or "parallel_cables",  Sheet, Item, keymark

go row by row of BOW_table.
Item = currentItem and Sheet=currentSheet then:
    if Tag = "size" --> keep appending --> store in bowCablesList when item number changes
    if Tag = "parallel_cables" --> keep appending --> store in bowCablesList when item number changes
    if Tag = "conductors" --> keep appending --> store in bowCablesList when item number changes
    if Tag = "insulation" --> keep appending --> store in bowCablesList when item number changes
    keep keymark field null.
 
 
 open up database at .\Resources\Database\soco_cables_list.db"
 lookup table called cables_list
 
 iterate through all the entries in bowCablesList.
 
 if 
 bowCablesList.size  = cables_list.Size AND 
 bowCablesList.parallel_cables = cables_list.ParallelCables AND
 bowCablesList.conductors  = cables_list.Conductors AND 
 bowCablesList.insulation  = cables_list.Insulation
 then
 bowCablesList.keymark = cables_list.KeyMark
 
 
 modify BOW_table to add rows using bowCablesList
 Word = keymark
 X1, Y1, X2, Y2 = 0
 Sheet = sheet
 PageRotation = 0
 WordRotation = 0 
 Tag = "keymark"
 Item = item
 ColorFlag = 0
 
 
 
 
using System.Data.SQLite;
using System.IO;


namespace PdfProcessor.Services;

public class CableDetailsService
{
    public void ProcessDatabase(string dbFilePath)
    {


create a separate function
in the BOW_table look group by Tag = 'keymark'.
place the Word value on the input pdf using the Sheet number and X1, Y1 values as coordinates











